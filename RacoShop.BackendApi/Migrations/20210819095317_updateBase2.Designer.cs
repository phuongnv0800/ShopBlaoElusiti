// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RacoShop.BackendApi.EF;

namespace RacoShop.BackendApi.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20210819095317_updateBase2")]
    partial class updateBase2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1603f9e2-212c-4342-9d2c-30963cb3f5ff"),
                            RoleId = new Guid("715fb82a-706c-47a0-8502-0cd8ca6d2192")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("715fb82a-706c-47a0-8502-0cd8ca6d2192"),
                            ConcurrencyStamp = "f86db1e7-6d02-408b-82ac-dd3cf8165000",
                            Description = "Quản trị viên",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("ba1575dc-3173-4ad3-af8e-d4b995d383cd"),
                            ConcurrencyStamp = "61cb6783-1ee1-47b1-83a7-3b5bb50065d4",
                            Description = "Khách hàng",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1603f9e2-212c-4342-9d2c-30963cb3f5ff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ffa46559-8a7f-46b5-9a94-2c2f61473c0b",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng08@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG08@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAKyjAsKuaCZCk9ZwDpyWpF0xe2xmLUwSVq7Mjun34cVKGkUAFmMWCn85wqOMiyCGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e29f5b9-b559-4558-ae64-c5eb781ee7d4",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("edf75882-6030-46e7-a664-cf1c583a6d35"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7af94f75-f077-4643-9b54-131cf7697f51",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng081@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG081@GMAIL.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBdOQkZivt6pmCGH5MA1boIQHnk+FGn137rIhr9OsPs5zbYXlx2fL2TZmsDpei2Syw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5083cff5-02bf-4e00-89b3-9108b0883768",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = new Guid("563c701e-3607-4939-9386-99c3cf505f9a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c451185-a260-4116-bd56-638de6304d2e",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng082@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG082@GMAIL.COM",
                            NormalizedUserName = "ADMIN2",
                            PasswordHash = "AQAAAAEAACcQAAAAEFf5VOuaUxuWEt9Fap8SejUjs5cNVUXasFAKmZfm4lAAQB5dP7MbCkqTuXQMcGMwsw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d48833a1-4b3d-4cb7-a123-4c0c905444b1",
                            TwoFactorEnabled = false,
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = new Guid("cf4af71a-e43f-4939-b3cb-393726484351"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfbead22-ac9d-4f94-a6a5-476730dc04a3",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng083@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG083@GMAIL.COM",
                            NormalizedUserName = "ADMIN3",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfQYUGBoNRnbQfCtJj+TNdQWc9iutmcL56y+90IOGSu68HzzVmmOzhx+BnYgT2o+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e9e166b2-7d5f-4953-9dbf-659cd110f8b9",
                            TwoFactorEnabled = false,
                            UserName = "admin3"
                        },
                        new
                        {
                            Id = new Guid("df077755-5e69-4cef-a8a3-68f47a5d6b92"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b870dfd4-68d9-43a5-b0d7-b56413af1c92",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng084@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG084@GMAIL.COM",
                            NormalizedUserName = "ADMIN4",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3OVCnOkqgBeCuWygyU/gQ+Q24aN+XsipwS6OqIIMCP2cSYcDfald+oi9QwUDJmhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2700d4ab-9128-40d7-a3ee-3048bf1fa1e3",
                            TwoFactorEnabled = false,
                            UserName = "admin4"
                        },
                        new
                        {
                            Id = new Guid("dd39a0d2-37a3-4ad3-9de0-97731020bb4d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ad4d2905-d00b-49bf-b7e4-c69386d9d85a",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng085@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG085@GMAIL.COM",
                            NormalizedUserName = "ADMIN5",
                            PasswordHash = "AQAAAAEAACcQAAAAEAvTSx9XrNMQGj8wRC0eTqQEnk6g//AwH6Yyk7QbfleOTYPU73B88vOOCTEgbmJHDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4600b8e-917b-4e4e-8def-c0c804f0075a",
                            TwoFactorEnabled = false,
                            UserName = "admin5"
                        },
                        new
                        {
                            Id = new Guid("63b37c25-4902-4f70-bee2-b2b7ad4cb892"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8c7ee25-179c-40da-9473-c0da76b32588",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng086@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG086@GMAIL.COM",
                            NormalizedUserName = "ADMIN6",
                            PasswordHash = "AQAAAAEAACcQAAAAEEBhY+GOGbuAa5JV68h8VWdC/Zl+LTWKmUGDZybbau4QlhPzIG3q2lk0wtskN29DIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "88277ddb-8b3b-4bf0-9c73-f8d78a87f14c",
                            TwoFactorEnabled = false,
                            UserName = "admin6"
                        },
                        new
                        {
                            Id = new Guid("7a49b107-6c2b-4d0a-b726-5f8094ef801f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8590d378-89f4-4c68-9b91-bae5cf3aa6dd",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng087@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG087@GMAIL.COM",
                            NormalizedUserName = "ADMIN7",
                            PasswordHash = "AQAAAAEAACcQAAAAECOti41TIHyhmauaGKwOHAHo2KnJ5VZVzY3ujs2b7kUvDZvDzj/EXPtxfsN9GjrOPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d080a4c3-573d-41f3-8f79-12c83bc1e32e",
                            TwoFactorEnabled = false,
                            UserName = "admin7"
                        },
                        new
                        {
                            Id = new Guid("4e07bb3d-7839-48bb-9299-dc7b5a0921ab"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17df9d25-e7c7-4538-ab0b-960569e1f5bb",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng088@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG088@GMAIL.COM",
                            NormalizedUserName = "ADMIN8",
                            PasswordHash = "AQAAAAEAACcQAAAAEGO9H5xrmm1oe0+0dTt8yEkpDHGbrpLtpUdsSrfFCf100C/AM16WwAM9rQj2fzwRTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5e17faf1-4497-4d0b-a412-0456a202bc6b",
                            TwoFactorEnabled = false,
                            UserName = "admin8"
                        },
                        new
                        {
                            Id = new Guid("cf5645f5-0d8c-4454-b77f-a95d0afa0255"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37568ea6-a741-4f76-bc03-546ab3900e32",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng089@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG089@GMAIL.COM",
                            NormalizedUserName = "ADMIN9",
                            PasswordHash = "AQAAAAEAACcQAAAAECubhxroCpDUXvS8JeTG5hmaHWMbSRiR8IVcZxipzQfaIxf1VSL3+0V/YyTp5p9LvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d0a59fe1-fe47-4e70-92f0-57bf54886cc2",
                            TwoFactorEnabled = false,
                            UserName = "admin9"
                        },
                        new
                        {
                            Id = new Guid("0764f8cd-f9ab-4045-8bef-f2378964a320"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d731f76-5b55-4a11-a463-0279ee564e96",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng080@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG080@GMAIL.COM",
                            NormalizedUserName = "ADMIN0",
                            PasswordHash = "AQAAAAEAACcQAAAAEK86bOnbc8Y2YFFY5fyltiz3J2vvBUVxPgNCkBHVC9DlngjVA2PCm82NfxEi+38OdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab772e94-89aa-4fd9-8b4a-ff059c2cb66f",
                            TwoFactorEnabled = false,
                            UserName = "admin0"
                        },
                        new
                        {
                            Id = new Guid("3250cfdc-6f22-4c8f-b5f0-aeff85e417a5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bdb36f7b-0c66-460e-8dfd-d4043fb6c2db",
                            Dob = new DateTime(2000, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "owlsng0801@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastName = "Phương",
                            LockoutEnabled = false,
                            NormalizedEmail = "OWLSNG0801@GMAIL.COM",
                            NormalizedUserName = "ADMIN01",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ7hoH3aXORcu2YS5Jg3jApflAJUMv24fzpkysaSkCKx/hBVIQVYERYOprDDEvNTkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ca879a9-eb8b-40ad-9391-33c426d303b3",
                            TwoFactorEnabled = false,
                            UserName = "admin01"
                        });
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Cart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Smartphone"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Laptop"
                        });
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipPhone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Discount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RatingCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Tempsoft",
                            Price = 601m,
                            Quantity = 52,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Alphazap",
                            Price = 980m,
                            Quantity = 2,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Cardguard",
                            Price = 930m,
                            Quantity = 41,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Otcom",
                            Price = 852m,
                            Quantity = 6,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Konklux",
                            Price = 982m,
                            Quantity = 12,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Transcof",
                            Price = 840m,
                            Quantity = 12,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Overhold",
                            Price = 976m,
                            Quantity = 33,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Zontrax",
                            Price = 558m,
                            Quantity = 93,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Rank",
                            Price = 599m,
                            Quantity = 85,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Trippledex",
                            Price = 634m,
                            Quantity = 79,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Zamit",
                            Price = 652m,
                            Quantity = 21,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Sonair",
                            Price = 667m,
                            Quantity = 29,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Konklab",
                            Price = 704m,
                            Quantity = 13,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Transcof",
                            Price = 601m,
                            Quantity = 30,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Zontrax",
                            Price = 996m,
                            Quantity = 18,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Ronstring",
                            Price = 625m,
                            Quantity = 22,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Alpha",
                            Price = 591m,
                            Quantity = 23,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 2,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Voltsillam",
                            Price = 594m,
                            Quantity = 11,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Fintone",
                            Price = 820m,
                            Quantity = 18,
                            Rating = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            Description = "Sản phẩm của bạn có cốt truyện đặc biệt đặc biệt đối với bạn không? Rất có thể nó sẽ đặc biệt đặc biệt và được khán giả yêu mến. Sử dụng câu chuyện đó trong mô tả sản phẩm của bạn để thêm nhiều tính cách cho mặt hàng của bạn, thu hút khán giả và thu phục trái tim và khối óc.",
                            Discount = 0,
                            ImagePath = "b4985220-01b3-4701-a978-a8ba2b55b271.jpg",
                            Name = "Keylex",
                            Price = 893m,
                            Quantity = 29,
                            Rating = 0,
                            RatingCount = 0
                        });
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ExternalTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RacoShop.BackendApi.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Cart", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RacoShop.BackendApi.Entities.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Order", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.OrderDetail", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RacoShop.BackendApi.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Product", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Transaction", b =>
                {
                    b.HasOne("RacoShop.BackendApi.Entities.AppUser", "AppUser")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("RacoShop.BackendApi.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
