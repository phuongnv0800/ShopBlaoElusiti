@if (Cart != null)
{<!--begin::Item-->
    <div class="d-flex align-items-center justify-content-between py-8">
        <div class="d-flex flex-column mr-2">
            <a href="product/@Cart.ProductId" class="font-weight-bold text-dark-75 font-size-lg text-hover-primary">@Cart.Name</a>
            <span class="text-muted">The best kitchen gadget in 2020</span>
            <div class="d-flex align-items-center mt-2">
                <span class="font-weight-bold mr-1 text-dark-75 font-size-lg">$ @Cart.SubTotal</span>
                <span class="text-muted mr-1">for</span>
                <span class="font-weight-bold mr-2 text-dark-75 font-size-lg">@Cart.Quantity</span>
                <button @onclick="DecreaseQuantity" class="btn btn-xs btn-light-success btn-icon mr-2">
                    <i class="ki ki-minus icon-xs"></i>
                </button>
                <button @onclick="IncreaseQuantity" class="btn btn-xs btn-light-success btn-icon">
                    <i class="ki ki-plus icon-xs"></i>
                </button>
            </div>
        </div>
        <a href="product/@Cart.ProductId" class="symbol symbol-70 flex-shrink-0">
            <img src="@Cart.ImagePath" title="" alt="" />
        </a>
    </div>
    <!--end::Item-->
}
else
{
    <LoadingIndicator></LoadingIndicator>
}
@inject ICartApiClient CartApiClient
@code {

    [Parameter]
    public CartVm Cart { get; set; }
    [Parameter]
    public EventCallback Callback { get; set; }
    private CartRequest request;

    protected override void OnParametersSet()
    {
        request = new CartRequest();
    }

    private async void IncreaseQuantity()
    {
        request.ProductId = Cart.ProductId;
        request.UserId = Cart.UserId;
        request.Quantity = Cart.Quantity + 1;
        var result = await CartApiClient.AddToCart(request);
        if (result) await Callback.InvokeAsync();
    }

    private async void DecreaseQuantity()
    {

        bool result;
        if (Cart.Quantity <= 1)
        {
            result = await CartApiClient.DeleteProduct(Cart.UserId, Cart.ProductId);
        }
        else
        {
            request.Quantity = Cart.Quantity - 1;
            request.ProductId = Cart.ProductId;
            request.UserId = Cart.UserId;
            result = await CartApiClient.AddToCart(request);
        }
        if (result) await Callback.InvokeAsync();
    }


}