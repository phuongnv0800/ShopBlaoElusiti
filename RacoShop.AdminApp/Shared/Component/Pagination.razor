
<nav class="d-flex justify-content-between">
    <ul class="pagination pagination-sm pagination-gutter m-0">
        @foreach (var link in _links)
        { 
        <li class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
            <a class="page-link" @onclick="() => OnSelectedPage(link)">@link.Text</a>
        </li>
        }
     </ul>
    <div class="d-flex align-items-center">
        <select class="default-select form-control form-control-sm wide me-3" @onchange="HandleChange" style="width: 75px;height:40px">
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="30">30</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
        <span class="text-muted">Displaying @MetaData.PageSize of @MetaData.TotalRecord records</span>
    </div>
</nav>

@code {
    [Parameter]
    public MetaData MetaData { get; set; }

    [Parameter]
    public int Spread { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    [Parameter]
    public EventCallback<int> ShowPageSize { get; set; }

    private List<PagingLink> _links;

    protected override void OnParametersSet()
    {
        CreatePaginationLinks();
    }
    private async void HandleChange(ChangeEventArgs e)
    {
        int size = Int32.Parse(e.Value.ToString());
        //MetaData.PageSize = size;
        await ShowPageSize.InvokeAsync(size);
    }
    private void CreatePaginationLinks()
    {
        _links = new List<PagingLink>();
        _links.Add(new PagingLink(MetaData.CurrentPage - 1, MetaData.HasPrevius, "<"));
        for (int i = 1; i <= MetaData.TotalPages; i++)
        {
            if (i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
            {
                _links.Add(new PagingLink(i, true, i.ToString())
                {
                    Active = MetaData.CurrentPage == i
                });
            }
        }
        _links.Add(new PagingLink(MetaData.CurrentPage + 1, MetaData.HasNext, ">"));
    }
    private async Task OnSelectedPage(PagingLink link)
    {
        //if (link.Page == MetaData.CurrentPage || !link.Enabled)
        //{
        //    return;
        //}
        //MetaData.CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

}