@page "/order" 
@inject IOrderApiClient OrderApiClient
<div class="row page-titles">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active"><a href="/">DashBoard</a></li>
        <li class="breadcrumb-item"><a href="/order">Order</a></li>
    </ol>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Product</h4>
                <Search OnSearch="SearchOrder"></Search>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-responsive-md">
                        <thead>
                            <tr>
                                <th>OrderId</th>
                                <th>Ngày tạo</th>
                                <th>Người đặt</th>
                                <th>Địa chỉ</th>
                                <th>Số điện thoại</th>
                                <th>Trạng thái</th>
                                <th>Hành động</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (orders != null)
                            {
                                <Virtualize Context="item" Items="orders">
                                    <ItemContent>
                                        <tr>
                                            <td>@item.Id</td>
                                            <td>@item.DateCreated</td>
                                            <td>@item.ShipName</td>
                                            <td>@item.ShipAddress</td>
                                            <td>@item.ShipPhone</td>
                                            <td>
                                                <span @onclick="()=>UpdateStatus(item.Id)">
                                                    <OrderLabel OrderStatus="@item.Status"></OrderLabel>
                                                </span>
                                            </td>
                                            <td>
                                                <button class="btn">
                                                    <span class="svg-icon svg-icon-primary svg-icon-2x">
                                                        <!--begin::Svg Icon | path:C:\wamp64\www\keenthemes\themes\metronic\theme\html\demo1\dist/../src/media/svg/icons\Code\Lock-circle.svg--><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 24 24" version="1.1">
                                                            <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                                                <rect x="0" y="0" width="24" height="24" />
                                                                <circle fill="#000000" opacity="0.3" cx="12" cy="12" r="10" />
                                                                <path d="M14.5,11 C15.0522847,11 15.5,11.4477153 15.5,12 L15.5,15 C15.5,15.5522847 15.0522847,16 14.5,16 L9.5,16 C8.94771525,16 8.5,15.5522847 8.5,15 L8.5,12 C8.5,11.4477153 8.94771525,11 9.5,11 L9.5,10.5 C9.5,9.11928813 10.6192881,8 12,8 C13.3807119,8 14.5,9.11928813 14.5,10.5 L14.5,11 Z M12,9 C11.1715729,9 10.5,9.67157288 10.5,10.5 L10.5,11 L13.5,11 L13.5,10.5 C13.5,9.67157288 12.8284271,9 12,9 Z" fill="#000000" />
                                                            </g>
                                                        </svg><!--end::Svg Icon-->
                                                    </span>
                                                </button>
                                            </td>
                                        </tr>
                                    </ItemContent>
                                    <Placeholder>
                                        <tr>
                                            <td>Loading...</td>
                                        </tr>
                                    </Placeholder>
                                </Virtualize>
                            }
                            else
                            {
                                <LoadingIndicator></LoadingIndicator>
                            }

                        </tbody>
                    </table>
                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ShowPageSize="ShowPageSize" />
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    private List<OrderVm> orders;

    private PagingRequest request = new PagingRequest();

    public MetaData MetaData { get; set; } = new MetaData();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetOrders();
    }
    private async Task SelectedPage(int page)
    {
        request.PageNumber = page;
        await GetOrders();
    }
    private async Task ShowPageSize(int size)
    {
        request.PageSize = size;
        request.PageNumber = 1;
        await GetOrders();
    }
    public async Task SearchOrder(string name)
    {
        this.request.Keyword = name;
        await GetOrders();
    }
    private async Task UpdateStatus(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(OrderStatusChange.Id), id);

        var moviesModal = Modal.Show<OrderStatusChange>("Status", parameters);
        var result = await moviesModal.Result;

        if (!result.Cancelled)
        {
            await GetOrders();
        }
    }
    //private async void Update(int id)
    //{
    //    var parameters = new ModalParameters();
    //    parameters.Add(nameof(UpdateProduct.Id), id);

    //    var moviesModal = Modal.Show<UpdateProduct>("Edit", parameters);
    //    var result = await moviesModal.Result;

    //    if (!result.Cancelled)
    //    {
    //        //StateHasChanged();
    //        await GetProduct();
    //    }
    //}

    private async Task GetOrders()
    {
        var result = await OrderApiClient.GetAll(request);
        orders = result.Items;
        MetaData = result.MetaData;
        StateHasChanged();
    }
}
