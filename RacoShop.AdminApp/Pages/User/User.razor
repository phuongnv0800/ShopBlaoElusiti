@page "/user"
@attribute [Authorize]
@inject IUserApiClient UserApiClient
<div class="row page-titles">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active"><a href="/">DashBoard</a></li>
        <li class="breadcrumb-item"><a href="user">User</a></li>
    </ol>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Mange User</h4>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-responsive-md">
                        <thead>
                            <tr>
                                <th><strong>ROLL NO.</strong></th>
                                <th><strong>NAME</strong></th>
                                <th><strong>Email</strong></th>
                                <th><strong>Gender</strong></th>
                                <th><strong>Date</strong></th>
                                <th><strong>Phone</strong></th>
                                <th><strong>Address</strong></th>
                                <th><strong>Assign</strong></th>
                                <th><strong>Action</strong></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (users != null && users.Count > 0)
                            {
                                foreach (var item in users)
                                {
                                    <tr>
                                        <td><strong>542</strong></td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <img src="@item.Avatar" class="rounded-lg me-2" width="24" alt="" />
                                                <span class="w-space-no">@item.FirstName&nbsp;@item.LastName</span>
                                            </div>
                                        </td>
                                        <td>@item.Email</td>
                                        <td>@(item.Gender == Gender.Male ? "Nam" : "Nữ")</td>
                                        <td>@item.Dob.ToShortDateString()</td>
                                        <td>@item.PhoneNumber</td>
                                        <td>@item.Address</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-primary text-nowrap" @onclick="()=>AssignRoleUser(item.Id)">Gán quyền</button>
                                        </td>
                                        <td>
                                            <div class="d-flex">
                                                <a role="button" @onclick="()=>Update(item.Id)" class="btn btn-primary shadow btn-xs sharp me-1"><i class="fa fa-pencil"></i></a>
                                                <a role="button" @onclick="()=>Delete(item.Id)" class="btn btn-danger shadow btn-xs sharp"><i class="fa fa-trash"></i></a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ShowPageSize="ShowPageSize"></Pagination>
                </div>
            </div>
        </div>
    </div>
</div>
@code{
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<UserVm> users;

    private PagingRequest request = new PagingRequest();

    public MetaData MetaData { get; set; } = new MetaData();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetUsers();
    }

    private async Task SelectedPage(int page)
    {
        request.PageNumber = page;
        await GetUsers();
    }

    private async Task ShowPageSize(int size)
    {
        request.PageSize = size;
        await GetUsers();
    }

    private async void AssignRoleUser(Guid id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AssignUser.Id), id);

        var moviesModal = Modal.Show<AssignUser>("Gán quyền", parameters);
        var result = await moviesModal.Result;

        if (!result.Cancelled)
            await GetUsers();
    }

    public async void SearchProduct(string name)
    {
        this.request.Keyword = name;
        StateHasChanged();
        await GetUsers();
    }

    private async void Delete(Guid id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteUser.Id), id);

        var moviesModal = Modal.Show<DeleteUser>("Xoá tài khoản", parameters);
        var result = await moviesModal.Result;

        if (result.Cancelled)
            Console.WriteLine("Modal was cancelled");
        else
            await GetUsers();
    }

    private async void Update(Guid id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(UpdateUser.Id), id);

        var moviesModal = Modal.Show<UpdateUser>("Cập nhật thông tin", parameters);
        var result = await moviesModal.Result;

        if (!result.Cancelled)
            await GetUsers();
    }

    private async Task GetUsers()
    {
        var result = await UserApiClient.GetAll(request);
        users = result.Items;
        MetaData = result.MetaData;
        StateHasChanged();
    }
} 