@inject IUserApiClient UserApiClient
@inject IRoleApiClient RoleApiClient
@inject IToastService ToastService
<div class="simple-form" style="width: 260px">
    <div class="">
        <div class="mb-3">
            @if (roles != null)
            {
                @foreach (var item in request.Roles)
                {
                    <div class="form-check mb-2">
                        <input type="checkbox" class="form-check-input"id="@item.Name"  @bind="item.Selected" >
                        <label class="form-check-label" for="@item.Name">@item.Name</label>
                    </div>
                }
            }
        </div>
    </div>

    <button @onclick="AssignRoleUser" class="btn btn-sm btn-primary me-3">Cập nhật</button>

    <button @onclick="ModalInstance.CancelAsync" class="btn btn-sm btn-danger">Huỷ bỏ</button>

</div>
@code {
    [Parameter]
    public Guid Id { get; set; }

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    private List<RoleVm> roles;

    private UserVm user;
    private RoleAssignRequest request;
    protected override async Task OnInitializedAsync()
    {
        request = new RoleAssignRequest();
        roles = await RoleApiClient.GetAll();
        user = await UserApiClient.GetById(Id);
        request.Id = Id;
        foreach (var role in roles)
        {
            request.Roles.Add(new SelectedItem()
            {
                Id = role.Id.ToString(),
                Name = role.Name,
                Selected = user.Roles.Contains(role.Name)
            });
        }
    }

    private async Task AssignRoleUser()
    {
        var result = await UserApiClient.Assign(Id, request);
        if (result)
        {
            ToastService.ShowSuccess($"Gán quyền thành công", $"Thông báo");
        }
        else
        {
            ToastService.ShowError("Cập nhật không thành công", "Thông báo");
        }
        await ModalInstance.CloseAsync(ModalResult.Ok<string>("thành công"));
    }
}
