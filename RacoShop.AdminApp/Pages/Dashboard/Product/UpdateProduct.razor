
@inject IToastService ToastService
@inject IProductApiClient ProductApiClient
<div class="simple-form" style="width: 500px">
    <div class="form-group">
        <label for="name">Name</label>
        <input class="form-control" id="name" @bind="@productUpdate.Name" />
        <small id="emailHelp" class="form-text text-muted">Nhập tên</small>
    </div>
    <div class="form-group">
        <label for="Price">Price</label>
        <input class="form-control" id="Price" @bind="@productUpdate.Price" />
        <small id="emailHelp" class="form-text text-muted">Nhập giá</small>
    </div>
    <div class="form-group">
        <label for="Quantity">Quantity</label>
        <input class="form-control" id="Quantity" @bind="@productUpdate.Quantity" />
        <small id="emailHelp" class="form-text text-muted">Nhập giá</small>
    </div>
    <div class="form-group">
        <label for="name">Description</label>
        <input class="form-control" id="name" @bind="@productUpdate.Description" />
        <small id="emailHelp" class="form-text text-muted">Nhập giới thiệu sản phẩm</small>
    </div>
    <div class="form-group">
        <label>Image: </label>
        <BlazorInputFile.InputFile OnChange="HandleFileSelection" />
        <img src="@imagePath" width="100" height="100" />
    </div>
    <button @onclick="Update" class="btn btn-primary">Cập nhật</button>

    <button @onclick="ModalInstance.CancelAsync" class="btn btn-secondary">Huỷ bỏ</button>
   
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    private ProductRequest productUpdate= new ProductRequest();

    private string imagePath;
    protected override void OnAfterRender(bool firstRender)
    {
        SetProduct();
        base.OnAfterRender(firstRender);
    }
    protected override  void OnInitialized()
    {
        SetProduct();
        base.OnInitialized();
    }
    private async void SetProduct()
    {
        var product = await ProductApiClient.GetById(Id);
        productUpdate.Id = product.Id;
        productUpdate.Name = product.Name;
        productUpdate.Description = product.Description;
        productUpdate.Price = product.Price;
        productUpdate.Quantity = product.Quantity;
        imagePath = product.ImagePath;
        StateHasChanged();
    }
    private async void Update()
    {
        var result = await ProductApiClient.UpdateProduct(Id, productUpdate);
        if (result)
        {
            ToastService.ShowSuccess($"Cập nhật sản phẩm", $"Thành công");
        }
        else
        {
            ToastService.ShowError("Cập nhật không thành công", "Thất bại");
        }
        await ModalInstance.CloseAsync(ModalResult.Ok<string>("thành công"));
    }

    public async Task HandleFileSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            using (var memorystream = new MemoryStream())
            {
                await file.Data.CopyToAsync(memorystream);
                productUpdate.ImageByte = memorystream.ToArray();
                imagePath = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(memorystream.ToArray()));
            }
        }
    }
}
