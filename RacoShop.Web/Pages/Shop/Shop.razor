@page "/shop"
    <!-- Start Breadcrumbs -->
<div class="breadcrumbs">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6 col-md-6 col-12">
                <div class="breadcrumbs-content">
                    <h1 class="page-title">Product</h1>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-12">
                <ul class="breadcrumb-nav">
                    <li><a href="/"><i class="lni lni-home"></i>Home</a></li>
                    <li><a href="shop">Shop</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- End Breadcrumbs -->
<!-- Start Trending Product Area -->
<section class="trending-product section" style="margin-top: 12px;">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="section-title">
                    <h2>Product</h2>
                    <p>
                        There are many variations of passages of Lorem Ipsum available, but the majority have
                        suffered alteration in some form.
                    </p>
                </div>
            </div>
        </div>

        @if (products != null)
        {<div class="row">
                @foreach (var item in products)
                {
                    <div class="col-lg-3 col-md-6 col-12">
                        <!-- Start Single Product -->
                        <div class="single-product">
                            <div class="product-image">
                                <img src="@item.ImagePath" alt="#">
                                <div class="button">
                                    <a href="product/@item.Id" class="btn"><i class="lni lni-cart"></i> Add to Cart</a>
                                </div>
                            </div>
                            <div class="product-info">
                                <span class="category">@item.CategoryName</span>
                                <h4 class="title">
                                    <a href="product/@item.Id">@item.Name</a>
                                </h4>
                                <ul class="review">
                                    <li><i class="lni lni-star-filled"></i></li>
                                    <li><i class="lni lni-star-filled"></i></li>
                                    <li><i class="lni lni-star-filled"></i></li>
                                    <li><i class="lni lni-star-filled"></i></li>
                                    <li><i class="lni lni-star"></i></li>
                                    <li><span>4.0 Review(s)</span></li>
                                </ul>
                                <div class="price">
                                    <span>@item.Price</span>
                                </div>
                            </div>
                        </div>
                        <!-- End Single Product -->
                    </div>
                }
            </div>
            <div class="row">
                <PaginationComponent MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ShowPageSize="ShowPageSize"></PaginationComponent>
            </div>
        }
        else
        {
            <LoadingIndicator />
        }

    </div>
</section>
<!-- End Trending Product Area -->

@inject IProductApiClient ProductApiClient

@code{
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<ProductVm> products;

    private PagingRequest request = new PagingRequest();

    public MetaData MetaData { get; set; } = new MetaData();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await GetProduct();
    }
    private async Task SelectedPage(int page)
    {
        request.PageNumber = page;
        await GetProduct();
    }
    private async Task ShowPageSize(int size)
    {
        request.PageSize = size;
        request.PageNumber = 1;
        await GetProduct();
    }
    public async void SearchProduct(string name)
    {
        this.request.Keyword = name;
        StateHasChanged();
        await GetProduct();
    }

    private async Task GetProduct()
    {
        var result = await ProductApiClient.GetAll(request);
        products = result.Items;
        MetaData = result.MetaData;
        StateHasChanged();
    }
} 